@import '~/styles/helpers.scss';

@function randomNum($min, $max) {
    $rand: random();
    $randomNum: $min + floor($rand * (($max - $min) + 1));

    @return $randomNum;
}

@keyframes animate {
    0% {
        background-position: 0% 0%;
    }
    50% {
        background-position: 0% 100%;
    }
    100% {
        background-position: 0% 0%;
    }
}

@mixin patternLines($color) {
    background: linear-gradient(
        #{randomNum(-30, -150)}deg,
        rgba($color, 0.4) 0% 10%,
        rgba($color, 0.5) 10.1% 20%,
        rgba($color, 0.6) 20.1% 30%,
        rgba($color, 0.7) 30.1% 40%,
        rgba($color, 0.8) 40.1% 50%,
        rgba($color, 0.9) 50.1% 60%,
        rgba($color, 1) 60.1% 100%
    );
}

@mixin patternCircles($color) {
    background: radial-gradient(
        circle at left #{percentage(randomNum(0, 100) / 100)},
        rgba($color, 1) 0% 40%,
        rgba($color, 0.9) 40.1% 50%,
        rgba($color, 0.8) 50.1% 60%,
        rgba($color, 0.7) 60.1% 70%,
        rgba($color, 0.6) 70.1% 80%,
        rgba($color, 0.5) 80.1% 90%,
        rgba($color, 0.4) 90.1% 100%
    );
}

.container {
    color: $c-white;
    @each $color, $hex in $themeColors {
        &-#{$color} {
            &-linear {
                @include patternLines($hex);
            }
            &-radial {
                @include patternCircles($hex);
            }
        }
    }
    // &Animate {
    //     background-size: 100% 175%;
    //     animation: animate 20s ease-in-out infinite #{randomNum(0, 1000) / 100}s;
    // }
    @for $i from 0 through 26 {
        &Animate-#{$i} {
            background-size: 100% 175%;
            animation: animate
                #{randomNum(20, 40)}s
                ease-in-out
                infinite
                ($i + unquote('s'));
        }
    }
}
